// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: login.proto

package go_micro_srv_login

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Login service

type LoginService interface {
	Auth(ctx context.Context, in *AuthReq, opts ...client.CallOption) (*AuthResp, error)
	LoginByJaccount(ctx context.Context, in *LJReq, opts ...client.CallOption) (*TokenResp, error)
	LoginByUP(ctx context.Context, in *UPReq, opts ...client.CallOption) (*TokenResp, error)
	LoginByWx(ctx context.Context, in *WxReq, opts ...client.CallOption) (*TokenResp, error)
	GetAccessToken(ctx context.Context, in *CodeReq, opts ...client.CallOption) (*AccessResp, error)
	GetJaccount(ctx context.Context, in *CodeReq, opts ...client.CallOption) (*JaccResp, error)
	BindJwtAndJaccount(ctx context.Context, in *BindReq, opts ...client.CallOption) (*BindResp, error)
}

type loginService struct {
	c    client.Client
	name string
}

func NewLoginService(name string, c client.Client) LoginService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.login"
	}
	return &loginService{
		c:    c,
		name: name,
	}
}

func (c *loginService) Auth(ctx context.Context, in *AuthReq, opts ...client.CallOption) (*AuthResp, error) {
	req := c.c.NewRequest(c.name, "Login.Auth", in)
	out := new(AuthResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) LoginByJaccount(ctx context.Context, in *LJReq, opts ...client.CallOption) (*TokenResp, error) {
	req := c.c.NewRequest(c.name, "Login.LoginByJaccount", in)
	out := new(TokenResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) LoginByUP(ctx context.Context, in *UPReq, opts ...client.CallOption) (*TokenResp, error) {
	req := c.c.NewRequest(c.name, "Login.LoginByUP", in)
	out := new(TokenResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) LoginByWx(ctx context.Context, in *WxReq, opts ...client.CallOption) (*TokenResp, error) {
	req := c.c.NewRequest(c.name, "Login.LoginByWx", in)
	out := new(TokenResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) GetAccessToken(ctx context.Context, in *CodeReq, opts ...client.CallOption) (*AccessResp, error) {
	req := c.c.NewRequest(c.name, "Login.GetAccessToken", in)
	out := new(AccessResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) GetJaccount(ctx context.Context, in *CodeReq, opts ...client.CallOption) (*JaccResp, error) {
	req := c.c.NewRequest(c.name, "Login.GetJaccount", in)
	out := new(JaccResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginService) BindJwtAndJaccount(ctx context.Context, in *BindReq, opts ...client.CallOption) (*BindResp, error) {
	req := c.c.NewRequest(c.name, "Login.BindJwtAndJaccount", in)
	out := new(BindResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Login service

type LoginHandler interface {
	Auth(context.Context, *AuthReq, *AuthResp) error
	LoginByJaccount(context.Context, *LJReq, *TokenResp) error
	LoginByUP(context.Context, *UPReq, *TokenResp) error
	LoginByWx(context.Context, *WxReq, *TokenResp) error
	GetAccessToken(context.Context, *CodeReq, *AccessResp) error
	GetJaccount(context.Context, *CodeReq, *JaccResp) error
	BindJwtAndJaccount(context.Context, *BindReq, *BindResp) error
}

func RegisterLoginHandler(s server.Server, hdlr LoginHandler, opts ...server.HandlerOption) error {
	type login interface {
		Auth(ctx context.Context, in *AuthReq, out *AuthResp) error
		LoginByJaccount(ctx context.Context, in *LJReq, out *TokenResp) error
		LoginByUP(ctx context.Context, in *UPReq, out *TokenResp) error
		LoginByWx(ctx context.Context, in *WxReq, out *TokenResp) error
		GetAccessToken(ctx context.Context, in *CodeReq, out *AccessResp) error
		GetJaccount(ctx context.Context, in *CodeReq, out *JaccResp) error
		BindJwtAndJaccount(ctx context.Context, in *BindReq, out *BindResp) error
	}
	type Login struct {
		login
	}
	h := &loginHandler{hdlr}
	return s.Handle(s.NewHandler(&Login{h}, opts...))
}

type loginHandler struct {
	LoginHandler
}

func (h *loginHandler) Auth(ctx context.Context, in *AuthReq, out *AuthResp) error {
	return h.LoginHandler.Auth(ctx, in, out)
}

func (h *loginHandler) LoginByJaccount(ctx context.Context, in *LJReq, out *TokenResp) error {
	return h.LoginHandler.LoginByJaccount(ctx, in, out)
}

func (h *loginHandler) LoginByUP(ctx context.Context, in *UPReq, out *TokenResp) error {
	return h.LoginHandler.LoginByUP(ctx, in, out)
}

func (h *loginHandler) LoginByWx(ctx context.Context, in *WxReq, out *TokenResp) error {
	return h.LoginHandler.LoginByWx(ctx, in, out)
}

func (h *loginHandler) GetAccessToken(ctx context.Context, in *CodeReq, out *AccessResp) error {
	return h.LoginHandler.GetAccessToken(ctx, in, out)
}

func (h *loginHandler) GetJaccount(ctx context.Context, in *CodeReq, out *JaccResp) error {
	return h.LoginHandler.GetJaccount(ctx, in, out)
}

func (h *loginHandler) BindJwtAndJaccount(ctx context.Context, in *BindReq, out *BindResp) error {
	return h.LoginHandler.BindJwtAndJaccount(ctx, in, out)
}
