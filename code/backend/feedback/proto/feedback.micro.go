// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/feedback.proto

package feedback

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for FeedbackSrv service

type FeedbackSrvService interface {
	Publish(ctx context.Context, in *PubReq, opts ...client.CallOption) (*PubResp, error)
	Delete(ctx context.Context, in *DltReq, opts ...client.CallOption) (*DltResp, error)
	Query(ctx context.Context, in *QryReq, opts ...client.CallOption) (*QryResp, error)
	Comment(ctx context.Context, in *CmtReq, opts ...client.CallOption) (*CmtResp, error)
}

type feedbackSrvService struct {
	c    client.Client
	name string
}

func NewFeedbackSrvService(name string, c client.Client) FeedbackSrvService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "feedback"
	}
	return &feedbackSrvService{
		c:    c,
		name: name,
	}
}

func (c *feedbackSrvService) Publish(ctx context.Context, in *PubReq, opts ...client.CallOption) (*PubResp, error) {
	req := c.c.NewRequest(c.name, "FeedbackSrv.Publish", in)
	out := new(PubResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSrvService) Delete(ctx context.Context, in *DltReq, opts ...client.CallOption) (*DltResp, error) {
	req := c.c.NewRequest(c.name, "FeedbackSrv.Delete", in)
	out := new(DltResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSrvService) Query(ctx context.Context, in *QryReq, opts ...client.CallOption) (*QryResp, error) {
	req := c.c.NewRequest(c.name, "FeedbackSrv.Query", in)
	out := new(QryResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feedbackSrvService) Comment(ctx context.Context, in *CmtReq, opts ...client.CallOption) (*CmtResp, error) {
	req := c.c.NewRequest(c.name, "FeedbackSrv.Comment", in)
	out := new(CmtResp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FeedbackSrv service

type FeedbackSrvHandler interface {
	Publish(context.Context, *PubReq, *PubResp) error
	Delete(context.Context, *DltReq, *DltResp) error
	Query(context.Context, *QryReq, *QryResp) error
	Comment(context.Context, *CmtReq, *CmtResp) error
}

func RegisterFeedbackSrvHandler(s server.Server, hdlr FeedbackSrvHandler, opts ...server.HandlerOption) error {
	type feedbackSrv interface {
		Publish(ctx context.Context, in *PubReq, out *PubResp) error
		Delete(ctx context.Context, in *DltReq, out *DltResp) error
		Query(ctx context.Context, in *QryReq, out *QryResp) error
		Comment(ctx context.Context, in *CmtReq, out *CmtResp) error
	}
	type FeedbackSrv struct {
		feedbackSrv
	}
	h := &feedbackSrvHandler{hdlr}
	return s.Handle(s.NewHandler(&FeedbackSrv{h}, opts...))
}

type feedbackSrvHandler struct {
	FeedbackSrvHandler
}

func (h *feedbackSrvHandler) Publish(ctx context.Context, in *PubReq, out *PubResp) error {
	return h.FeedbackSrvHandler.Publish(ctx, in, out)
}

func (h *feedbackSrvHandler) Delete(ctx context.Context, in *DltReq, out *DltResp) error {
	return h.FeedbackSrvHandler.Delete(ctx, in, out)
}

func (h *feedbackSrvHandler) Query(ctx context.Context, in *QryReq, out *QryResp) error {
	return h.FeedbackSrvHandler.Query(ctx, in, out)
}

func (h *feedbackSrvHandler) Comment(ctx context.Context, in *CmtReq, out *CmtResp) error {
	return h.FeedbackSrvHandler.Comment(ctx, in, out)
}
